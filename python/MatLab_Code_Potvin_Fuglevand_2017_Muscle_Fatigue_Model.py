# Autogenerated with SMOP
from __future__ import division
import numpy as np
from smop.core import *
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m

    # Motor Unit Based Muscle Fatigue Model by Jim Potvin & Andrew Fuglevand
# front end (rested size-principle) based on Fuglevand, Winter & Patla (1993)
# last updated 2017-05-28 by Jim Potvin

#clear all
# clc
## Model input parameters
nu=120 #ORIGINAL: nu=120
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:9

samprate=10 #ORIGINAL 10
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:11

res=100 #ORIGINAL: res=100
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:12

hop=20
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:13

r=50
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:14

fat=180
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:16

FatFac=0.0225
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:17

tau=22
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:19

adaptSF=0.67
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:20

ctSF=0.379
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:21

mthr=1
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:23

a=1
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:24

minfr=8
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:25

pfr1=35
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:26

pfrL=25
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:27

mir=1
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:28

rp=100
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:29

rt=3
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:30

tL=90
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:31

## Various methods to create, or read in, force (#MVC)time-histories

#     # Create isotonic data -----------------------------------

fthscale=0.5
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:38
con='0.50'
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:39

fthtime=100 #ORIGINAL fthtime=100
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:40

fthsamp=dot(fthtime,samprate)

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:42
fth=zeros(1,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:43
for z in arange(1,fthsamp).reshape(-1):
    fth[z]=fthscale
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:45

    ## Create Ramp Plateau data -----------------------------------

    #         con = 'Plateaus'
#         yMAXforce = 35
#         ondur = 32;
#         mag = 0.20
#         frame = 0;
#         cyc = ondur * samprate          # duration of each plateau
#         transition = 5 * samprate       # duration of transition between plateaus
#         for n = 1:cyc
#             frame = frame + 1;
#             fth(frame) = mag * 1;
#         end
#         for n = 1:transition
#             frame = frame + 1;
#             fth(frame) = (mag * 1) + (mag * n / transition);
#         end
#         for n = 1:cyc
#             frame = frame + 1;
#             fth(frame) = mag * 2;
#         end
#         for n = 1:transition
#             frame = frame + 1;
#             fth(frame) = (mag * 2) + (mag * n / transition);
#         end
#         for n = 1:cyc
#             frame = frame + 1;
#             fth(frame) = mag * 3;
#         end
#         fthsamp = frame

    ## Calculations from the Fuglevand, Winter & Patla (1993) Model

ns=arange(1,fthsamp,1)

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:81

fth=fth[ns]

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:82

thr=zeros(1,nu)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:85
# TODO: When changing this to numpy arange note that it MUST be nu+1
n=arange(1,nu,1) # TODO: strip the last 1 here

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:86
b=log(r + (1 - mthr)) / (nu - 1)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:87

for i in arange(1,nu).reshape(-1):
    thr[i]=dot(a,exp(dot((i - 1),b))) - (1 - mthr)

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:89

# Peak Firing Rate (frp)
    # modified from Fuglevand et al (1993) PFR equation (5) to remove thr(1) before ratio
frdiff=pfr1 - pfrL

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:94
frp=pfr1 - dot(frdiff,((thr[n] - thr[1]) / (r - thr[1])))

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:95
maxex=thr[nu] + (pfrL - minfr) / mir

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:96

maxact=int(round(dot(maxex,res)))

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:97

ulr=dot(100,thr[nu]) / maxex

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:98

# Calculation of the rested motor unit twitch properties (these will change with fatigue)

# Firing Rates for each MU with increased excitation (act)
mufr=zeros(nu,maxact)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:103
for mu in arange(1,nu).reshape(-1):
    for act in arange(1,maxact).reshape(-1):
        acti=act / res
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:106
        if acti >= thr[mu]:
            mufr[mu,act]=dot(mir,(acti - thr[mu])) + minfr
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:108
            if mufr[mu,act] > frp[mu]:
                mufr[mu,act]=frp[mu]
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:110
        else:
            if acti < thr[mu]:
                mufr[mu,act]=0
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:113

k=arange(1,maxact,1)

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:118

# Twitch peak force (P)
b=log(rp) / (nu - 1)

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:121

P=exp(dot(b,(n - 1)))

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:122

# Twitch contraction time (ct)
c=log(rp) / log(rt)

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:125

ct=zeros(1,nu)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:126
for mu in arange(1,nu).reshape(-1):
    ct[mu]=dot(tL,(1 / P[mu]) ** (1 / c))

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:128

# Normalized motor unit firing rates (nmufr) with increased excitation (act)
nmufr=zeros(nu,maxact)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:132
for mu in arange(1,nu).reshape(-1):
    for act in arange(1,maxact).reshape(-1):
        nmufr[mu,act]=dot(ct[mu],(mufr[mu,act] / 1000))
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:135

# Motor unit force, relative to full fusion (Pr) with increasing excitation
        # based on Figure 2 of Fuglevand et al (1993)
sPr=1 - exp(dot(- 2,(0.4 ** 3)))

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:141
Pr=zeros(nu,maxact)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:142
for mu in arange(1,nu).reshape(-1):
    for act in arange(1,maxact).reshape(-1):
        if nmufr[mu,act] <= 0.4:
            Pr[mu,act]=dot(nmufr[mu,act] / 0.4,sPr)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:146
        if nmufr[mu,act] > 0.4:
            Pr[mu,act]=1 - exp(dot(- 2,(nmufr[mu,act] ** 3)))
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:149


# Motor unit force (muP) with increased excitation
muP=zeros(nu,maxact)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:155
for mu in arange(1,nu).reshape(-1):
    for act in arange(1,maxact).reshape(-1):
        muP[mu,act]=dot(Pr[mu,act],P[mu])
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:158

totalP=sum(muP,1)

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:161

maxP=totalP[maxact]

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:162

Pnow=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:165
Pnow[:,1]=ravel(P)[:,1] # TODO: The indexing here seems odd, 1 indexed vs 0?

# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:166
## Calculation of Fatigue Parameters (recovery currently set to zero in this version)

# note, if rp = 100 & fat = 180, there will be a 100 x 180 = 1800-fold difference in
# the absolute fatigue of the highest threshold vs the lowest threshold.
# The highest threshold MU will only achieve ~57# of its maximum (at 25 Hz), so the actual range of fatigue
# rates is 1800 x 0.57 = 1026

# fatigue rate for each motor unit  (note: "log" means "ln" in Matlab)
b2=log(fat) / (nu - 1)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:177
mufatrate=exp(dot(b2,(n - 1)))
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:178
fatigue=zeros(1,nu)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:180
for mu in arange(1,nu).reshape(-1):
    fatigue[mu]=dot(dot(mufatrate[mu],(FatFac / fat)),P[mu])
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:182
    # the only variable is the relative force: Pr(mu,act), so this part is calculated once here

# Establishing the rested excitation required for each target load level (if 0.1# resolution, then 0.1# to 100#)
startact=zeros(1,100)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:188
for force in arange(1,100).reshape(-1):
    startact[force]=0
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:190
    for act in arange(1,maxact).reshape(-1):
        if (dot(totalP[act] / maxP,100)) < force:
            startact[force]=act - 1
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:193

Pchangecurves=zeros(nu,maxact)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:198
for act in arange(1,maxact).reshape(-1):
    for mu in arange(1,nu).reshape(-1):
        Pchangecurves[mu,act]=dot(dot(fatigue[mu],Pr[mu,act]),P[mu])
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:201

mes='start of fatigue analysis'
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:205
## Moving through force time-history and determing the excitation required to meet the target force at each time

TmuPinstant=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:209
m=zeros(1,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:210
mufrFAT=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:211
ctFAT=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:212
ctREL=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:213
nmufrFAT=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:214
PrFAT=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:215
muPt=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:216
TPt=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:217
Ptarget=zeros(1,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:218
Tact=zeros(1,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:219
Pchange=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:220
TPtMAX=zeros(1,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:221
muPtMAX=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:222
muON=zeros(nu)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:223
adaptFR=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:224
Rdur=zeros(1,nu)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:225
acttemp=zeros(fthsamp,maxact)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:226
muPna=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:227
muForceCapacityRel=zeros(nu,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:228
timer=0
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:229
for i in arange(1,fthsamp).reshape(-1):
    if i == dot(dot((timer + 1),samprate),60):
        timer=timer + 1
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:234
        current=i / samprate
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:235
    force=round(dot(fth[i],100)) + 1
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:238
    if force > 100:
        force=100
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:240
    s=startact[force] - (dot(5,res))
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:242
    if s < 1:
        s=1
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:244
    acthop=round(maxact / hop)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:247
    act=copy(s)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:248
    for a in arange(1,maxact).reshape(-1):
        acttemp[i,a]=act
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:250
        for mu in arange(1,nu).reshape(-1):
            # MU firing rate adaptation modified from Revill & Fuglevand (2011)
            # this was modified to directly calculate the firing rate adaption, as 1 unit change in excitation causes 1 unit change in firing rate
            # scaled to the mu threshold (highest adaptation for hightest threshold mu)
            if muON[mu] > 0:
                Rdur[mu]=(i - muON[mu] + 1) / samprate
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:258
            if Rdur[mu] < 0:
                Rdur[mu]=0
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:261
            adaptFR[mu,i]=dot(dot(dot((thr[mu] - 1) / (thr[nu] - 1),adaptSF),(mufr[mu,act] - minfr + 2)),(1 - exp(dot(- 1,Rdur[mu]) / tau)))
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:264
            if adaptFR[mu,i] < 0:
                adaptFR[mu,i]=0
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:266
            mufrFAT[mu,i]=mufr[mu,act] - adaptFR[mu,i]
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:269
            mufrMAX=mufr[mu,maxact] - adaptFR[mu,i]
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:270
            ctFAT[mu,i]=dot(ct[mu],(1 + dot(ctSF,(1 - Pnow[mu,i] / P[mu]))))
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:272
            ctREL[mu,i]=ctFAT[mu,i] / ct[mu]
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:273
            nmufrFAT[mu,i]=dot(ctFAT[mu,i],(mufrFAT[mu,i] / 1000))
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:275
            nmufrMAX=dot(ctFAT[mu,i],(mufrMAX / 1000))
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:276
            if nmufrFAT[mu,i] <= 0.4:
                PrFAT[mu,i]=dot(nmufrFAT[mu,i] / 0.4,sPr)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:279
            if nmufrFAT[mu,i] > 0.4:
                PrFAT[mu,i]=1 - exp(dot(- 2,(nmufrFAT[mu,i] ** 3)))
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:282
            muPt[mu,i]=dot(PrFAT[mu,i],Pnow[mu,i])
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:284
            if nmufrMAX <= 0.4:
                PrMAX=dot(nmufrMAX / 0.4,sPr)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:287
            if nmufrMAX > 0.4:
                PrMAX=1 - exp(dot(- 2,(nmufrMAX ** 3)))
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:290
            muPtMAX[mu,i]=dot(PrMAX,Pnow[mu,i])
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:292
        TPt[i]=sum(muPt[:,i]) / maxP
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:296
        TPtMAX[i]=sum(muPtMAX[:,i]) / maxP
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:297
        if TPt[i] < fth[i] and act == maxact:
            break
        if TPt[i] < fth[i]:
            act=act + acthop
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:304
            if act > maxact:
                act=copy(maxact)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:306
        if TPt[i] >= fth[i] and acthop == 1:
            break
        if TPt[i] >= fth[i] and acthop > 1:
            act=act - (acthop - 1)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:313
            if act < 1:
                act=1
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:315
            acthop=1
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:317
    for mu in arange(1,nu).reshape(-1):
        if muON[mu] == 0 and (act / res) >= thr[mu]:
            muON[mu]=i
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:324
    Ptarget[i]=TPt[i]
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:328
    Tact[i]=act
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:329
    # Calculating the fatigue (force loss) for each motor unit
    for mu in arange(1,nu).reshape(-1):
        if mufrFAT[mu,i] >= 0:
            Pchange[mu,i]=dot(dot(- 1,(fatigue[mu] / samprate)),PrFAT[mu,i])
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:335
        else:
            if mufrFAT[mu,i] < recminfr:
                Pchange[mu,i]=recovery(mu) / samprate
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:337
        if i < 2:
            Pnow[mu,i + 1]=P[mu]
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:341
        else:
            if i >= 2:
                Pnow[mu,i + 1]=Pnow[mu,i] + Pchange[mu,i]
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:344
        if Pnow[mu,i + 1] >= P[mu]:
            Pnow[mu,i + 1]=P[mu]
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:348
        if Pnow[mu,i + 1] < 0:
            Pnow[mu,i + 1]=0
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:352


Tstrength=zeros(1,fthsamp)
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:360
for i in arange(1,fthsamp).reshape(-1):
    for mu in arange(1,nu).reshape(-1):
        muPna[mu,i]=dot(Pnow[mu,i],muP[mu,maxact]) / P[mu]
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:363
    Tstrength[i]=sum(muPna[:,i]) / maxP
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:365

for i in arange(1,fthsamp).reshape(-1):
    endurtime=i / samprate
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:368
    if TPtMAX[i] < fth[i]:
        break



## Output

EndStrength=(dot(TPtMAX[fthsamp],100))
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:377
endurtime

for mu in arange(0,nu).reshape(-1):
    if mu == 0:
        mu=1
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:383
    muForceCapacityRel[mu,ns]=dot(Pnow[mu,ns],100) / P[mu]
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:385

# TODO: Replace graphing code
# hold('off')
combo=matlabarray(cat(ravel(ns) / samprate,ravel(fth),dot(ravel(Tact) / res / maxex,100),dot(ravel(Tstrength),100),dot(ravel(Ptarget),100),dot(ravel(TPtMAX),100)))
combo=combo.reshape(-1,6)
print combo.shape
# MatLab_Code_Potvin_Fuglevand_2017_Muscle_Fatigue_Model.m:389
fileA = 'python - ' + con + ' A - Target - Act - Strength (no adapt) - Force - Strength (w adapt).csv'
fileB = 'python - ' + con + ' B - Firing Rate.csv'
fileC = 'python - ' + con + ' C - Individual MU Force Time-History.csv'
fileD = 'python - ' + con + ' D - MU Capacity - relative.csv'

np.savetxt(fileA, combo, delimiter=',', fmt='%1.16g', newline='\n')
np.savetxt(fileB, mufrFAT[:,:].T, delimiter=',', fmt='%1.16g', newline='\n')
np.savetxt(fileC, muPt[:,:].T, delimiter=',', fmt='%1.16g', newline='\n')
np.savetxt(fileD, muForceCapacityRel[:,:].T, delimiter=',', fmt='%1.16g', newline='\n')
